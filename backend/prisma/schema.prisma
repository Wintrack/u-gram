// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auth {
  id             String  @id @default(uuid())
  email          String  @unique
  password       String?
  isExternalAuth Boolean @default(false)

  user User?
}

model User {
  id          String   @id @default(uuid())
  pseudo      String   @unique
  firstname   String
  lastname    String
  phoneNumber String?  @unique
  createdAt   DateTime @default(now())

  auth   Auth   @relation(fields: [authId], references: [id], onDelete: Cascade)
  authId String @unique

  profilPicture   FileDescriptor @relation(fields: [profilPictureId], references: [id], onDelete: Cascade)
  profilPictureId String         @unique

  pictures           Picture[]
  mentionnedPictures Picture[] @relation(name: "mentionnedPictures")

  notifications Notification[]
  likedPictures      Picture[] @relation(name: "likedByUsers")
  comments           Comment[]
}

model Picture {
  id          String   @id @default(uuid())
  description String
  keyWords    String[]

  autor   User   @relation(fields: [autorId], references: [id], onDelete: Cascade)
  autorId String

  mentions User[]    @relation(name: "mentionnedPictures")
  likes    User[]    @relation(name: "likedByUsers")
  comments Comment[]

  file   FileDescriptor @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId String         @unique

  createdAt DateTime @default(now())
}

model Comment {
  id   String @id @default(uuid())
  text String

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  picture   Picture @relation(fields: [pictureId], references: [id], onDelete: Cascade)
  pictureId String

  createdAt DateTime @default(now())
}

model FileDescriptor {
  id       String @id @default(uuid())
  name     String
  mimeType String
  fileId   String @unique @default(uuid())

  user    User?
  picture Picture?
}

model Notification {
  id      String @id @default(uuid())
  content String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model File {
  id           String @id @default(uuid())
  descriptorId String @unique
  data         Bytes
}
